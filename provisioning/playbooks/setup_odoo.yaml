---
- hosts: all
  vars:
    ansible_python_interpreter: /usr/bin/python3
    odoo_user: odoo
    odoo_port: 8069
    odoo_longpolling: 8072
    odoo_version: 14.0
    odoo_db: odoo8069
    python_version: 3.8.5
    pyenv_bin: "/home/{{ odoo_user }}/.pyenv/bin/pyenv"
  become: yes
  become_user: odoo
  tasks:
    - name: Ensure odoo config dir
      ansible.builtin.file:
        path: "/home/{{ odoo_user }}/config"
        owner: "{{ odoo_user }}"
        group: "{{ odoo_user }}"
        state: directory
    - name: Create odoo config file
      ansible.builtin.template:
        src: ../templates/odoo.conf.j2
        dest: "/home/{{ odoo_user }}/config/odoo.conf"
    - name: Ensure logs dir
      ansible.builtin.file:
        path: "/home/{{ odoo_user }}/logs"
        owner: "{{ odoo_user }}"
        group: "{{ odoo_user }}"
        state: directory
    - name: Prepare odoo log
      ansible.builtin.file:
        path: "/home/{{ odoo_user }}/logs/odoo.log"
        owner: "{{ odoo_user }}"
        group: "{{ odoo_user }}"
        state: touch
    - name: Ensure odoo filestore dir
      ansible.builtin.file:
        path: "/home/{{ odoo_user }}/filestore"
        owner: "{{ odoo_user }}"
        group: "{{ odoo_user }}"
        state: directory
    - name: Git ensure odoo src
      ansible.builtin.git:
        repo: https://github.com/odoo/odoo.git
        dest: "/home/{{ odoo_user }}/odoo"
        version: "{{ odoo_version }}"
    - name: Check for python version
      ansible.builtin.shell: "{{ pyenv_bin }} versions | grep {{ python_version }} | wc -l"
      register: version_count
    - name: Install python version if needed
      ansible.builtin.shell: "{{ pyenv_bin }} install {{ python_version }}"
      when: version_count.stdout == "0"
    - name: Check for virtual env
      ansible.builtin.shell: "{{ pyenv_bin }} versions | grep {{ python_version }}/envs/odoo | wc -l"
      register: odoo_virtualenv_count
    - name: Create virtual environment if needed
      ansible.builtin.shell: "{{ pyenv_bin }} virtualenv {{ python_version }} odoo"
      when: odoo_virtualenv_count.stdout == "0"
    - name: Make virtualenv the pyenv global default
      ansible.builtin.shell: "{{ pyenv_bin }} global odoo"
    - name: Define odoo as a service without running
      become: yes
      become_user: root
      ansible.builtin.template:
        src: "../templates/odoo.service.j2"
        dest: "/etc/systemd/system/odoo8069.service"
    - name: Prepare log rotation
      become: yes
      become_user: root
      ansible.builtin.template:
        src: "../templates/logrotate.j2"
        dest: "/etc/logrotate.d/odoo"

